CREATE DATABASE EL_GRAN_POETA;
USE EL_GRAN_POETA;

CREATE TABLE PERFILES (
    ID_PERFIL INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_TRABAJADOR VARCHAR(100) NOT NULL,
    TIPO_PERFIL ENUM('JEFE DE BODEGAS', 'BODEGUERO') NOT NULL
);

CREATE TABLE USUARIOS (
    ID_USUARIO INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_USUARIO VARCHAR(100) NOT NULL,
    CONTRASEÃ‘A VARCHAR(100) NOT NULL,
    ID_PERFIL INT NOT NULL,
    FOREIGN KEY (ID_PERFIL) REFERENCES PERFILES(ID_PERFIL)
);

CREATE TABLE EDITORIALES (
	ID_EDITORIAL INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_EDITORIAL VARCHAR(30) NOT NULL,
    PAIS_EDITORIAL VARCHAR(30)
    );

CREATE TABLE AUTORES (
	ID_AUTOR INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_AUTOR VARCHAR(50) NOT NULL,
	APELLIDO_AUTOR VARCHAR(50),
    PAIS_AUTOR VARCHAR(30)
    );

CREATE TABLE BODEGAS (
    ID_BODEGA INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE_BODEGA VARCHAR(20) NOT NULL,
    ID_PERFIL INT NOT NULL,
    NOMBRE_TRABAJADOR VARCHAR(20) NOT NULL,
    FOREIGN KEY (ID_PERFIL) REFERENCES PERFILES(ID_PERFIL) ON DELETE RESTRICT
);
CREATE TABLE PRODUCTOS (
	ID_PRODUCTO INT AUTO_INCREMENT PRIMARY KEY,
	NOMBRE_PRODUCTO VARCHAR(100) NOT NULL,
    DESCRIPCION VARCHAR (100),
	TIPO_PRODUCTO ENUM ("LIBRO", "REVISTA", "ENCICLOPEDIA") NOT NULL,
    ID_BODEGA INT NOT NULL,
    ID_EDITORIAL INT,
    ID_AUTOR INT,
    FOREIGN KEY (ID_BODEGA) REFERENCES BODEGAS(ID_BODEGA),
    FOREIGN KEY (ID_EDITORIAL) REFERENCES EDITORIALES(ID_EDITORIAL),
    FOREIGN KEY (ID_AUTOR) REFERENCES AUTORES(ID_AUTOR)
    );

CREATE TABLE AUTORES_PRODUCTOS (
    ID_AUTOR INT,
    ID_PRODUCTO INT,
    PRIMARY KEY (ID_AUTOR, ID_PRODUCTO),
    FOREIGN KEY (ID_AUTOR) REFERENCES AUTORES(ID_AUTOR),
    FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO)
);

CREATE TABLE INVENTARIO (
    ID_INVENTARIO INT AUTO_INCREMENT PRIMARY KEY,
    CANTIDAD INT NOT NULL,
    ID_PRODUCTO INT NOT NULL,
    ID_BODEGA INT NOT NULL,
    FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO) ON DELETE RESTRICT,
    FOREIGN KEY (ID_BODEGA) REFERENCES BODEGAS(ID_BODEGA) ON DELETE RESTRICT
);

CREATE TABLE MOVIMIENTOS (
    ID_MOVIMIENTO INT AUTO_INCREMENT PRIMARY KEY,
    FECHA DATE NOT NULL,
    ID_PERFIL INT NOT NULL,
    ID_BODEGA_ORIGEN INT NOT NULL,
    ID_BODEGA_DESTINO INT NOT NULL,
    ID_PRODUCTO INT NOT NULL,
    ID_INVENTARIO INT NOT NULL,
    CANTIDAD_EN_MOVIMIENTO INT NOT NULL,     
    FOREIGN KEY (ID_BODEGA_ORIGEN) REFERENCES BODEGAS(ID_BODEGA),
    FOREIGN KEY (ID_BODEGA_DESTINO) REFERENCES BODEGAS(ID_BODEGA),
    FOREIGN KEY (ID_PERFIL) REFERENCES PERFILES(ID_PERFIL),
    FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTO),
    FOREIGN KEY (ID_INVENTARIO) REFERENCES INVENTARIO(ID_INVENTARIO)
);

CREATE VIEW INFORMACION_COMPLETA AS
SELECT PR.ID_PRODUCTO, PR.NOMBRE_PRODUCTO, PR.TIPO_PRODUCTO, 
       GROUP_CONCAT(A.NOMBRE_AUTOR, ' ', A.APELLIDO_AUTOR SEPARATOR ', ') AS AUTORES,
       B.NOMBRE_BODEGA
FROM PRODUCTOS PR
JOIN BODEGAS B ON PR.ID_BODEGA = B.ID_BODEGA
LEFT JOIN AUTORES A ON PR.ID_AUTOR = A.ID_AUTOR
GROUP BY PR.ID_PRODUCTO, PR.NOMBRE_PRODUCTO, PR.TIPO_PRODUCTO, B.NOMBRE_BODEGA;

CREATE VIEW LISTA_PRODUCTOS AS
SELECT PR.ID_PRODUCTO,
       PR.NOMBRE_PRODUCTO,
       PR.DESCRIPCION,
       PR.TIPO_PRODUCTO,
       PR.ID_BODEGA,
       PR.ID_EDITORIAL,
       GROUP_CONCAT(A.NOMBRE_AUTOR SEPARATOR ', ') AS AUTORES
FROM PRODUCTOS PR
LEFT JOIN AUTORES_PRODUCTOS AP ON PR.ID_PRODUCTO = AP.ID_PRODUCTO
LEFT JOIN AUTORES A ON AP.ID_AUTOR = A.ID_AUTOR
GROUP BY PR.ID_PRODUCTO, PR.NOMBRE_PRODUCTO, PR.DESCRIPCION, PR.TIPO_PRODUCTO, PR.ID_BODEGA, PR.ID_EDITORIAL;

DELIMITER // 

CREATE TRIGGER Tr_Bodegas_NoEliminarConProductos
BEFORE DELETE ON BODEGAS
FOR EACH ROW 
BEGIN
    IF EXISTS (SELECT 1 FROM INVENTARIO WHERE ID_BODEGA = OLD.ID_BODEGA) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No se puede eliminar una bodega con productos.';
    END IF;
END //

CREATE TRIGGER Tr_Productos_NoEliminarEnBodega
BEFORE DELETE ON PRODUCTOS
FOR EACH ROW
BEGIN
    IF EXISTS (SELECT 1 FROM INVENTARIO WHERE ID_PRODUCTO = OLD.ID_PRODUCTO) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No se puede eliminar un producto registrado en bodega.';
    END IF;
END //

CREATE TRIGGER Tr_Editoriales_NoEliminarConProducto
BEFORE DELETE ON EDITORIALES
FOR EACH ROW
BEGIN
    IF EXISTS (SELECT 1 FROM PRODUCTOS WHERE ID_EDITORIAL = OLD.ID_EDITORIAL) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No se puede eliminar editorial con productos registrados.';
    END IF;
END //

CREATE TRIGGER Tr_Autores_NoEliminarConProducto
BEFORE DELETE ON AUTORES
FOR EACH ROW
BEGIN
    IF EXISTS (SELECT 1 FROM PRODUCTOS WHERE ID_AUTOR = OLD.ID_AUTOR) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'No se puede eliminar autor con productos relacionados.';
    END IF;
END //

DELIMITER ;



